[{"/workspace/to-do-list/frontend/src/index.tsx":"1","/workspace/to-do-list/frontend/src/App.tsx":"2","/workspace/to-do-list/frontend/src/styles/global.ts":"3","/workspace/to-do-list/frontend/src/hooks/useCategories.tsx":"4","/workspace/to-do-list/frontend/src/components/Header/index.tsx":"5","/workspace/to-do-list/frontend/src/components/Categories/index.tsx":"6","/workspace/to-do-list/frontend/src/components/Tasks/index.tsx":"7","/workspace/to-do-list/frontend/src/components/Categories/styles.ts":"8","/workspace/to-do-list/frontend/src/components/Header/styles.ts":"9","/workspace/to-do-list/frontend/src/components/Tasks/styles.tsx":"10","/workspace/to-do-list/frontend/src/components/Categories/NewCategoryModal/index.tsx":"11","/workspace/to-do-list/frontend/src/components/Categories/CategoryCard/index.tsx":"12","/workspace/to-do-list/frontend/src/components/Categories/NewCategoryModal/styles.ts":"13","/workspace/to-do-list/frontend/src/components/Categories/CategoryCard/styles.ts":"14","/workspace/to-do-list/frontend/src/components/Register/index.tsx":"15","/workspace/to-do-list/frontend/src/components/Register/styles.ts":"16","/workspace/to-do-list/frontend/src/services/api.ts":"17","/workspace/to-do-list/frontend/src/components/Login/index.tsx":"18","/workspace/to-do-list/frontend/src/tools/getToken.ts":"19"},{"size":268,"mtime":1651927635319,"results":"20","hashOfConfig":"21"},{"size":750,"mtime":1651927832539,"results":"22","hashOfConfig":"21"},{"size":1407,"mtime":1651004266000,"results":"23","hashOfConfig":"21"},{"size":3512,"mtime":1650927594000,"results":"24","hashOfConfig":"21"},{"size":2583,"mtime":1651927907263,"results":"25","hashOfConfig":"21"},{"size":1347,"mtime":1650809219000,"results":"26","hashOfConfig":"21"},{"size":7065,"mtime":1651008520000,"results":"27","hashOfConfig":"21"},{"size":1112,"mtime":1650748007000,"results":"28","hashOfConfig":"21"},{"size":1323,"mtime":1651883338000,"results":"29","hashOfConfig":"21"},{"size":4996,"mtime":1651008466000,"results":"30","hashOfConfig":"21"},{"size":5160,"mtime":1651615366000,"results":"31","hashOfConfig":"21"},{"size":932,"mtime":1650809225000,"results":"32","hashOfConfig":"21"},{"size":2465,"mtime":1651004538000,"results":"33","hashOfConfig":"21"},{"size":1074,"mtime":1650807891000,"results":"34","hashOfConfig":"21"},{"size":3811,"mtime":1651872703000,"results":"35","hashOfConfig":"21"},{"size":1093,"mtime":1651873199000,"results":"36","hashOfConfig":"21"},{"size":467,"mtime":1651927939631,"results":"37","hashOfConfig":"21"},{"size":3142,"mtime":1651873037000,"results":"38","hashOfConfig":"21"},{"size":142,"mtime":1651879269000,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},"sn052i",{"filePath":"44","messages":"45","suppressedMessages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"43"},{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"54","messages":"55","suppressedMessages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"57","messages":"58","suppressedMessages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"43"},{"filePath":"61","messages":"62","suppressedMessages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"43"},{"filePath":"65","messages":"66","suppressedMessages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"68","messages":"69","suppressedMessages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"71","messages":"72","suppressedMessages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"43"},{"filePath":"75","messages":"76","suppressedMessages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"43"},{"filePath":"79","messages":"80","suppressedMessages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"43"},{"filePath":"83","messages":"84","suppressedMessages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"86","messages":"87","suppressedMessages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"89","messages":"90","suppressedMessages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"92","messages":"93","suppressedMessages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"95","messages":"96","suppressedMessages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"98","messages":"99","suppressedMessages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"101","messages":"102","suppressedMessages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},"/workspace/to-do-list/frontend/src/index.tsx",[],[],[],"/workspace/to-do-list/frontend/src/App.tsx",["104"],[],"import { Header } from \"./components/Header\";\nimport { Categories } from \"./components/Categories\";\nimport { Tasks } from \"./components/Tasks\";\n\nimport { CategoriesProvider } from \"./hooks/useCategories\";\n\nimport { GlobalCss } from \"./styles/global\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport \"emoji-mart/css/emoji-mart.css\";\n\n\nimport { Routes, Route, Link } from \"react-router-dom\";\n\n\nfunction App() {\n  return (\n    <>\n      <CategoriesProvider>\n\n        <Header />\n\n        <Routes>\n          <Route path=\"/categories\" element={<Categories />}/>\n          \n          <Route path=\":categoryID/tasks\" element={<Tasks />} />\n\n        </Routes>\n      </CategoriesProvider>\n        \n      <GlobalCss />\n    </>\n  );\n}\n\nexport default App;\n","/workspace/to-do-list/frontend/src/styles/global.ts",[],[],"/workspace/to-do-list/frontend/src/hooks/useCategories.tsx",[],[],"/workspace/to-do-list/frontend/src/components/Header/index.tsx",["105"],[],"/workspace/to-do-list/frontend/src/components/Categories/index.tsx",["106","107","108"],[],"import { useEffect, useState } from \"react\";\nimport { useCategories } from \"../../hooks/useCategories\";\nimport { CategoryCard } from \"./CategoryCard\";\n\nimport { Header, Section, Container } from \"./styles\";\nimport ImgFolder from \"../../assets/folder.svg\";\n\nexport function Categories() {\n  const { setNewCategoryModalIsOpen } = useCategories().modalOpen;\n  const { allCategories, refreshLocalCategory } = useCategories();\n  const [isEditing, setIsEditing] = useState(false);\n\n  useEffect(() => {\n    refreshLocalCategory();\n  }, [])\n\n  return (\n    <Container>\n      <div>\n        <Header>\n          <h1>Categorias</h1>\n          <hr />\n        </Header>\n\n        <Section>\n          {\n            allCategories.map((card, index) =>\n              <CategoryCard\n                key={index}\n                data={{\n                  isModel: false,\n                  categoryID: card.categoryID,\n                  bgColor: card.bgColor,\n                  textColor: card.textColor,\n                  content: card.content,\n                  emojiID: card.emojiID\n                }}\n              />\n            )\n          }\n\n          <div className=\"new-category-card\" onClick={() => setNewCategoryModalIsOpen(true)}>\n            <img src={ImgFolder} alt=\"nova categoria \"/>\n          </div>\n        </Section>\n      </div>\n    </Container>\n  );\n}","/workspace/to-do-list/frontend/src/components/Tasks/index.tsx",["109"],[],"import { useState, useEffect } from \"react\";\nimport { Emoji } from \"emoji-mart\";\nimport { Link, useParams, useNavigate } from \"react-router-dom\";\nimport { v4 as uuid } from \"uuid\";\nimport { useCategories } from \"../../hooks/useCategories\";\n\nimport { Header, Container, CreateNewTask, TaskContainer, Section, WithOutTasks, Details, Dropdown } from \"./styles\";\nimport ImgBack from \"../../assets/back.svg\";\nimport ImgWithoutTask from \"../../assets/task.svg\";\n\nexport type Task = {\n  taskID: string;\n  content: string;\n  finish: boolean;\n  categoryID: string;\n}\n\ntype AllTasks = {\n  finished: Task[];\n  incomplete: Task[];\n}\n\nexport function Tasks() {\n  const [category, setCategory] = useState({\n    bgColor: \"#0f3f86\",\n    categoryID: \"loadings\",\n    content: \"loading...\",\n    emojiID: \"warning\",\n    textColor: \"white\",\n  });\n  const [allTasks, setAllTasks] = useState<AllTasks>({\n    finished: [],\n    incomplete: []\n  });\n  const [newTask, setNewTask] = useState<Task>({\n    taskID: \"\",\n    content: \"\",\n    finish: false,\n    categoryID: \"\",\n  });\n\n  const [dropdownIsOpen, setDropdownIsOpen] = useState(false);\n  const [isEditing, setIsEditing] = useState(false);\n\n  const { deleteLocalCategory } = useCategories();\n  const params = useParams();\n  const Navigate = useNavigate();\n\n  function getLocalCategoryInfo(categoryID: string) { // FOi\n    let data = JSON.parse(localStorage.getItem(\"@to-do-list/categories\") || \"[]\")\n\n    for (let c = 0; c < data.length; c++) {\n      if (data[c].categoryID === categoryID) {\n        return setCategory(data[c]);\n      }\n    }\n  }\n\n  function refreshLocalTasksState() { // if localstorage change\n    let localData: Task[] = JSON.parse(localStorage.getItem(\"@to-do-list/tasks\") || \"[]\");\n    let filterTasks: AllTasks = {\n      finished: [],\n      incomplete: []\n    };\n\n    for (let c = 0; c < localData.length; c++) {\n      if (localData[c].categoryID === params.categoryID) {\n        if (localData[c].finish) {\n          filterTasks.finished.push(localData[c]);\n        } else {\n          filterTasks.incomplete.push(localData[c]);\n        }\n      }\n    }\n\n    setAllTasks(filterTasks);\n  }\n\n  function newLocalTask() {\n    let localData: Task[] = JSON.parse(localStorage.getItem(\"@to-do-list/tasks\") || \"[]\");\n\n    localData.push({\n      taskID: uuid(),\n      content: newTask.content,\n      categoryID: params.categoryID || \"\",\n      finish: false\n    });\n\n    localStorage.setItem(\"@to-do-list/tasks\", JSON.stringify(localData));\n\n    refreshLocalTasksState();\n    setNewTask({\n      taskID: \"\",\n      content: \"\",\n      finish: false,\n      categoryID: \"\",\n    });\n  }\n\n  function handleDoneLocalTask(taskID: string) {\n    let localData: Task[] = JSON.parse(localStorage.getItem(\"@to-do-list/tasks\") || \"[]\");\n\n    for (let c = 0; c < localData.length; c++) {\n      if (localData[c].taskID === taskID) {\n        if (isEditing) {\n          localData.splice(c, 1);\n\n          if (localData.length === 1) setIsEditing(false);\n        } else {\n          localData[c].finish = localData[c].finish ? false : true;\n        }\n      }\n    }\n\n    localStorage.setItem(\"@to-do-list/tasks\", JSON.stringify(localData));\n    refreshLocalTasksState();\n  }\n\n  function handleNewTask() {\n    if (newTask.content.length > 0) {\n      newLocalTask();\n    }\n  }\n  \n  function handleDeleteCategory() {\n    deleteLocalCategory(category.categoryID)\n\n    Navigate(\"/categories\");\n  }\n\n  useEffect(() => {\n    getLocalCategoryInfo(params.categoryID || \"\");\n    refreshLocalTasksState();\n  }, [])\n\n  return (\n    <Container>\n      <Header bgColor={category.bgColor} textColor={category.textColor}>\n        <div>\n          <Link to={\"/categories\"} >\n            <div>\n              <img src={ImgBack} alt=\"Voltar\" />\n              <h2> Voltar</h2>\n            </div>\n          </Link>\n        </div>\n\n        <div>\n          <Dropdown isOpen={dropdownIsOpen}>\n            <div>\n              <span onClick={handleDeleteCategory}>\n                <i className=\"fa-solid fa-trash\"></i> Deletar Categoria\n              </span>\n\n              <span \n                onClick={() => {\n                  setDropdownIsOpen(false);\n                  setIsEditing(true);\n                }}>\n                <i  className=\"fa-solid fa-trash\"></i> Excluir uma tarefa\n              </span>\n            </div>\n\n            <div onClick={() => setDropdownIsOpen(dropdownIsOpen === false)}>\n              <i className=\"fa-solid fa-gear\"></i>\n            </div>\n          </Dropdown>\n\n          <div>\n            <Emoji emoji={\"heavy_plus_sign\"} set='facebook' size={40} />\n\n            <h1>{category.content}</h1>\n          </div>\n        </div>\n      </Header>\n\n      <Section>\n        {\n          isEditing\n          ? \n          <div className=\"edit-tasks\"> \n            <strong>Clique na categoria que deseja deletar</strong>\n            \n            <button onClick={() => setIsEditing(false)}>Sair do modo edição</button>\n          </div>\n          : <></>\n        }\n        <CreateNewTask\n          isOk={newTask.content.length !== 0}\n        >\n          <div onClick={handleNewTask}>\n            <i className={\"fa-solid fa-plus\"} ></i>\n          </div>\n\n          <div>\n            <input\n              type=\"text\"\n              placeholder=\"Adicionar nova tarefa\"\n              value={newTask.content}\n              onChange={e => setNewTask({ ...newTask, content: e.target.value })}\n            />\n          </div>\n        </CreateNewTask>\n\n        {\n          allTasks.finished.length === 0 && allTasks.incomplete.length === 0\n          ? <WithOutTasks>\n              <img src={ImgWithoutTask} alt=\"Nenhuma task cadastrada\" />\n\n              <h1>Nenhuma task cadastrada</h1>\n            </WithOutTasks>\n          : <></>\n        }\n        {\n          allTasks.incomplete.map(task =>\n            <TaskContainer\n              key={task.taskID}\n              onClick={() => handleDoneLocalTask(task.taskID)}\n              finish={task.finish}\n              isEditing={isEditing}\n            >\n              <div>\n                <i className=\"fa-solid fa-circle\"></i>\n              </div>\n\n              <div>\n                {task.content}\n              </div>\n            </TaskContainer>\n          )\n        }\n        {\n          allTasks.finished.length > 0\n          ? <Details open>\n              <summary>Tarefas Concluídas ({allTasks.finished.length})</summary>\n              {\n                allTasks.finished.map(task =>\n\n                  <TaskContainer\n                    key={task.taskID}\n                    onClick={() => handleDoneLocalTask(task.taskID)}\n                    finish={task.finish}\n                    isEditing={isEditing}\n                  >\n                    <div>\n                      <i className=\"fa-solid fa-circle-check\"></i>\n                    </div>\n\n                    <div>\n                      {task.content}\n                    </div>\n                  </TaskContainer>\n                )\n              }\n            </Details>\n          : <></>\n        }\n\n      </Section>\n    </Container>\n  );\n}","/workspace/to-do-list/frontend/src/components/Categories/styles.ts",[],[],"/workspace/to-do-list/frontend/src/components/Header/styles.ts",[],[],"/workspace/to-do-list/frontend/src/components/Tasks/styles.tsx",["110"],[],"import styled from \"styled-components\";\n\n\ntype HeaderProps = {\n  bgColor: string;\n  textColor: string;\n}\n\ntype CreateNewTaskProps = {\n  isOk: boolean;\n}\n\ntype TaskContainer = {\n  finish: boolean;  \n  isEditing: boolean;\n}\n\ntype DropdownProps = {\n  isOpen: boolean;\n}\n\nexport const Header = styled.header<HeaderProps>`\n\n  width: 100%;\n  min-height: 15rem;\n  background-color: ${props => props.bgColor ? props.bgColor : \"#0f3f86\"};\n  display: flex;\n  justify-content: space-between;\n  margin-top: 0.75rem;\n\n  padding: 1rem;\n  \n  > div:nth-child(1) {\n    align-self: self-end;\n    \n    > a div:nth-child(1) {\n\n      display: flex;\n      align-items: end;\n\n      img {\n        margin-right: 1rem;\n      }\n\n      h2 {\n        color: ${({bgColor}) => bgColor === \"#ffffff\" ? \"black\" : \"#ffffff\"};  \n      }\n    }\n  }\n\n  > div:nth-child(2) {\n    align-items: end;\n    display: flex;\n    flex-direction: column;\n    justify-content: space-between;\n    \n\n    > div:nth-child(2) {\n      background-color: rgb(255, 255, 255, .1);\n      align-items: end;\n      display: flex;\n\n      padding: 0.5rem;\n      border-radius: 0.5rem;\n\n      h1 {\n        margin-left: 1rem;\n        color: ${props => props.textColor ? props.textColor : \"#fff\"};\n        \n        overflow: hidden;\n        text-overflow: ellipsis;\n        white-space: nowrap;\n        max-width: 31ch;\n      }\n    }\n  }\n\n`;\n\n\nexport const Section = styled.section`\n  padding: 2rem;\n\n  .edit-tasks { \n    margin-bottom: 0.75rem;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n\n    button {\n      border: none;\n      background-color: blue;\n      color: white;\n      padding: 0.5rem 1rem;\n      border-radius: 0.5rem;\n      margin-top: 0.5rem;\n    }\n    \n    strong {\n      color: #bd2020;\n    }\n  }\n`;\n\nexport const Container = styled.main`\n\n\n`;\n\nexport const CreateNewTask = styled.div<CreateNewTaskProps>`\n\n  display: flex;\n  align-items: center;\n  font-weight: 700;\n  font-size: 1.5rem;\n\n  //padding: 1rem;\n  background: #ffffff0f;\n  border-radius: 0.5rem;\n  margin-bottom: 1.5rem;\n\n  > div:nth-child(1) {\n    border-radius: 50%;\n    background-color: ${({isOk}) => isOk ? \"green\" : \"white\"};\n    color: ${({isOk}) => isOk ? \"white\" : \"black\"};\n    cursor: ${({isOk}) => isOk ? \"pointer\" : \"not-allowed\"};\n    width: 2rem;\n    height: 2rem;\n\n    display: flex;\n    align-items: center;\n    justify-content: center;\n\n    margin: 1rem;\n    margin-right: 0.5rem;\n  }\n\n  > div:nth-child(2) {\n    color: white;\n    margin-right: 1rem;\n    width: 100%;\n\n    > input {\n      background-color: #ffffff00;\n      border: none;\n      height: 3rem;\n      outline: none;\n      font-size: 1.5rem;\n      color: white;\n      padding-left: 1rem;\n      width: 100%;\n\n      :focus {\n        background-color: #ffffff0f;\n      }\n    }\n\n    :hover > input {\n        background-color: #ffffff0f;\n    }\n  }\n`;\n\nexport const TaskContainer = styled.div<TaskContainer>`\n  display: flex;\n  background-color: #ffffff0f;\n  font-size: 1.4rem;\n  align-items: end;\n\n  padding: 0.75rem;\n  border-radius: 0.25rem;\n  margin-bottom: 0.5rem;\n\n  transition: all 300ms;\n\n  border: ${({isEditing}) => isEditing ? \"solid 1px red\" : \"none\"};\n\n  cursor: pointer;\n\n  > div:nth-child(1) {\n    .fa-circle {\n      opacity: 0.5;\n      color: gray;    \n      margin-right: 0.5rem;\n    }\n    .fa-circle-check {\n      color: #5162ff;\n      margin-right: 0.5rem;\n    }\n  }\n\n  > div:nth-child(2) {\n    color: white;\n    text-decoration: ${({finish}) => finish ? \"line-through\" : \"none\"};\n  }\n\n  :hover {\n    box-shadow: 0 5px 10px rgb(0, 0, 0, 0.2);\n  }\n\n`;\n\n\nexport const WithOutTasks = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  padding: 4rem;\n  opacity: 0.5;\n  user-select: none;\n\n  h1 {\n    color: #696a70;\n    font-size: 1.75rem\n  }\n\n  img {\n    width: 5rem;\n    opacity: 0.5;\n  }\n\n`;\n\n\nexport const Details = styled.details`\n  color: white;\n  margin-top: 2rem;\n\n  summary {\n    font-size: 1.4rem;\n    width: max-content;\n    background: #ffffff1f;\n    padding: 0.5rem;\n    cursor: pointer;\n  }\n\n`;\n\n\nexport const Dropdown = styled.div<DropdownProps>`\n  cursor: pointer;\n\n  div:nth-child(2) {\n    border-radius: 50%;\n    width: 2rem;\n    height: 2rem;\n\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    \n    background-color: #ffffff50;\n    transition: all 300ms;\n  }\n  position: relative;\n  \n  > * {\n    display: ${ ({isOpen}) => isOpen ? \"block\" : \"none\" }\n  }\n\n  i {\n    color: #2c2c2c;\n  }\n\n  div:nth-child(1) {\n    position: absolute;\n    right: 0;\n    top: 2rem;\n    width: max-content;\n    box-shadow: 0 0 10px rgb(0, 0, 0, 0.75);\n\n    span {\n      display: block;\n      padding: 0.25rem 0.4rem;\n      background: white;\n      transition: all 250ms;\n      \n      i {\n        color: #bd2020;\n      }\n    }\n\n    span:nth-child(1) {\n      border-bottom: solid 1px rgb(0, 0, 0, 0.1);\n      cursor: pointer;\n    }\n    span:hover {\n      filter: brightness(0.8);\n    }\n  }\n`;","/workspace/to-do-list/frontend/src/components/Categories/NewCategoryModal/index.tsx",["111"],[],"import { useEffect, useState } from \"react\";\nimport Modal from \"react-modal\";\n\nimport { CategoryCard } from \"../CategoryCard\";\nimport { Emoji, Picker, EmojiData } from \"emoji-mart\";\nimport { useCategories } from \"../../../hooks/useCategories\";\n\nimport MenuCategoryIcon from \"../../../assets/app.png\";\nimport CloseModal from \"../../../assets/close.svg\";\nimport { CategoryModalForm, RoundColorPicker } from \"./styles\";\n\nModal.setAppElement(\"#root\");\n\nexport function NewCategoryModal() {\n  const {previewNewCategory, setPreviewNewCategory} = useCategories().newCategoryState;\n  const {createLocalCategory} = useCategories();\n  const { newCategoryModalIsOpen, setNewCategoryModalIsOpen } = useCategories().modalOpen;\n\n  const [isFormOk, setIsFormOk] = useState(false);\n  const [openEmojis, setOpenEmojis] = useState(false);\n\n\n  function changeContent(text: string) {\n    setPreviewNewCategory({ ...previewNewCategory, content: text });\n  }\n\n  function changeBgColor(hexaColor: string) {\n    setPreviewNewCategory({ ...previewNewCategory, bgColor: hexaColor });\n  }\n\n  function changeTxtColor(hexaColor: string) {\n    setPreviewNewCategory({ ...previewNewCategory, textColor: hexaColor });\n  }\n\n  function changeEmoji(emoji: EmojiData) {\n    setOpenEmojis(false);\n    setPreviewNewCategory({ ...previewNewCategory, emojiID: emoji.id || \"warning\" });\n  }\n\n  function addNewCategory() {\n    if (previewNewCategory.content?.length === 0) {\n      alert(\"ERRO! Categoria sem conteúdo, tente novamente.\");\n    } else {\n      createLocalCategory(previewNewCategory);\n    }\n  }\n\n\n  useEffect(() => {\n    if (previewNewCategory.content.length <= 0 && isFormOk === false)\n      setIsFormOk(true);\n    else if (isFormOk === true)\n      setIsFormOk(false);\n  }, [previewNewCategory.content]);\n\n  return (\n    <Modal\n      isOpen={newCategoryModalIsOpen}\n      onRequestClose={() => setNewCategoryModalIsOpen(false)}\n      overlayClassName={\"modal-overlay\"}\n      className={\"modal-content\"}\n    >\n\n      <img\n        onClick={() => setNewCategoryModalIsOpen(false)}\n        className=\"close-modal-icon\"\n        src={CloseModal}\n        alt=\"Fechar modal\"\n      />\n\n      <CategoryModalForm>\n\n        <div className=\"modal-title-header\">\n          <img src={MenuCategoryIcon} alt=\"Nova categoria icone\" />\n          <h1>Adicione uma nova Categoria</h1>\n        </div>\n\n        <div className=\"modal-title-input\">\n          <input\n            onFocus={(e) => e.target.select()}\n            onChange={(e) => changeContent(e.target.value)}\n            value={previewNewCategory.content}\n            type=\"text\"\n            placeholder=\"Coloque aqui o nome da categoria\" />\n        </div>\n\n        <div className=\"modal-configs-inputs\">\n\n          <div>\n            <div>\n              <h4>Configurações do cartão</h4>\n\n              <RoundColorPicker>\n                <div>\n                  <input\n                    onChange={(e) => changeBgColor(e.target.value)}\n                    value={previewNewCategory.bgColor}\n                    id=\"bg-color\"\n                    type=\"color\"\n                    alt=\"selecionar cor do fundo do cartão\"\n                  />\n                </div>\n\n                <label htmlFor=\"bg-color\">Cor de fundo</label>\n              </RoundColorPicker>\n\n              <RoundColorPicker>\n                <div>\n                  <input\n                    onChange={(e) => changeTxtColor(e.target.value)}\n                    value={previewNewCategory.textColor}\n                    id=\"txt-color\"\n                    type=\"color\"\n                    alt=\"selecionar cor da letra do cartão\" />\n                </div>\n\n                <label htmlFor=\"txt-color\">Cor da letra</label>\n              </RoundColorPicker>\n\n              <div className=\"select-emoji\">\n                { openEmojis ? \n                  <Picker\n                    set=\"facebook\"\n                    onSelect={(e) => changeEmoji(e)}\n                    \n                    showPreview={false}\n                    showSkinTones={false}\n                    theme={\"dark\"}\n                    style={{\n                      position: \"absolute\",\n                      bottom: \"0\",\n                      left: \"3rem\",\n                      zIndex: 2,\n                      minWidth: \"300px\",\n                    }}\n                  /> : <></>\n                }\n                \n                <div id=\"icon-container\" onClick={() => openEmojis ? setOpenEmojis(false) : setOpenEmojis(true)}>\n                  <Emoji emoji={previewNewCategory.emojiID} set=\"facebook\" size={40} />\n\n                  <label htmlFor=\"select-emoji-id\">Ícone da categoria</label>\n                </div>\n\n              </div>\n            </div>\n\n            <div></div>\n\n            <div>\n              <h4>Seu cartão de categoria ficará assim: </h4>\n              <CategoryCard data={{...previewNewCategory, isModel: true}} />\n            </div>\n          </div>\n        </div>\n\n        <div className=\"finish-new-category\">\n          <button disabled={isFormOk} onClick={addNewCategory}>Adicionar nova categoria</button>\n        </div>\n\n      </CategoryModalForm>\n    </Modal>\n  );\n}","/workspace/to-do-list/frontend/src/components/Categories/CategoryCard/index.tsx",["112","113"],[],"import { useState } from \"react\";\nimport { Container } from \"./styles\";\nimport { Emoji } from \"emoji-mart\";\nimport { Link, useNavigate } from \"react-router-dom\";\n\n\ntype CategoryCardProps = {\n  data: {\n    isModel: boolean;\n    categoryID: string;\n    emojiID: string;\n    content: string;\n    bgColor: string;\n    textColor: string;\n  }\n}\n\nexport function CategoryCard({ data }: CategoryCardProps) {\n  const Navigate = useNavigate();\n\n  function onLinkClick() {\n    if (!data.isModel) {\n      Navigate(`/${data.categoryID}/tasks`)\n    }\n  }\n\n  return (\n    <div onClick={onLinkClick}>\n      <Container style={{ backgroundColor: data.bgColor }}>\n        <header>\n          <Emoji emoji={data.emojiID} set='facebook' size={52} />\n        </header>\n\n        <section style={{ color: data.textColor }}>\n          {data.content.length === 0 ? \"Título da categoria\" : data.content}\n        </section>\n      </Container>\n    </div>\n  );\n}","/workspace/to-do-list/frontend/src/components/Categories/NewCategoryModal/styles.ts",[],[],"/workspace/to-do-list/frontend/src/components/Categories/CategoryCard/styles.ts",[],[],"/workspace/to-do-list/frontend/src/components/Register/index.tsx",[],[],"/workspace/to-do-list/frontend/src/components/Register/styles.ts",[],[],"/workspace/to-do-list/frontend/src/services/api.ts",[],[],"/workspace/to-do-list/frontend/src/components/Login/index.tsx",[],[],"/workspace/to-do-list/frontend/src/tools/getToken.ts",[],[],{"ruleId":"114","severity":1,"message":"115","line":12,"column":25,"nodeType":"116","messageId":"117","endLine":12,"endColumn":29},{"ruleId":"118","severity":1,"message":"119","line":28,"column":40,"nodeType":"120","messageId":"121","endLine":28,"endColumn":42},{"ruleId":"114","severity":1,"message":"122","line":11,"column":10,"nodeType":"116","messageId":"117","endLine":11,"endColumn":19},{"ruleId":"114","severity":1,"message":"123","line":11,"column":21,"nodeType":"116","messageId":"117","endLine":11,"endColumn":33},{"ruleId":"124","severity":1,"message":"125","line":15,"column":6,"nodeType":"126","endLine":15,"endColumn":8,"suggestions":"127"},{"ruleId":"124","severity":1,"message":"128","line":134,"column":6,"nodeType":"126","endLine":134,"endColumn":8,"suggestions":"129"},{"ruleId":"130","severity":1,"message":"131","line":165,"column":14,"nodeType":"116","messageId":"132","endLine":165,"endColumn":27},{"ruleId":"124","severity":1,"message":"133","line":54,"column":6,"nodeType":"126","endLine":54,"endColumn":34,"suggestions":"134"},{"ruleId":"114","severity":1,"message":"135","line":1,"column":10,"nodeType":"116","messageId":"117","endLine":1,"endColumn":18},{"ruleId":"114","severity":1,"message":"115","line":4,"column":10,"nodeType":"116","messageId":"117","endLine":4,"endColumn":14},"@typescript-eslint/no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'isEditing' is assigned a value but never used.","'setIsEditing' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'refreshLocalCategory'. Either include it or remove the dependency array.","ArrayExpression",["136"],"React Hook useEffect has missing dependencies: 'params.categoryID' and 'refreshLocalTasksState'. Either include them or remove the dependency array.",["137"],"@typescript-eslint/no-redeclare","'TaskContainer' is already defined.","redeclared","React Hook useEffect has a missing dependency: 'isFormOk'. Either include it or remove the dependency array.",["138"],"'useState' is defined but never used.",{"desc":"139","fix":"140"},{"desc":"141","fix":"142"},{"desc":"143","fix":"144"},"Update the dependencies array to be: [refreshLocalCategory]",{"range":"145","text":"146"},"Update the dependencies array to be: [params.categoryID, refreshLocalTasksState]",{"range":"147","text":"148"},"Update the dependencies array to be: [isFormOk, previewNewCategory.content]",{"range":"149","text":"150"},[529,531],"[refreshLocalCategory]",[3516,3518],"[params.categoryID, refreshLocalTasksState]",[1746,1774],"[isFormOk, previewNewCategory.content]"]