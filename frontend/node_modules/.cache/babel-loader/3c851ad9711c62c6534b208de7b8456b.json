{"ast":null,"code":"var _jsxFileName = \"/workspace/to-do-list/src/hooks/useCategories.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { createContext, useContext, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CategoriesContext = /*#__PURE__*/createContext({});\nexport function CategoriesProvider(_ref) {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [previewNewCategory, setCategoryInfo] = useState({\n    bgColor: \"#ffffff\",\n    textColor: \"#000000\",\n    content: \"\",\n    emojiID: \"croissant\"\n  });\n  const [newCategoryModalIsOpen, setNewCategoryModalIsOpen] = useState(false);\n  const [allCategories, setAllCategories] = useState([]);\n\n  function refreshLocalCategory() {\n    let currentData = JSON.parse(localStorage.getItem(\"@to-do-list\") || \"[]\");\n    setAllCategories(currentData);\n  }\n\n  function createLocalCategory(data) {\n    try {\n      let currentData = JSON.parse(localStorage.getItem(\"@to-do-list\") || \"[]\");\n      currentData.push(data);\n      localStorage.setItem(\"@to-do-list\", JSON.stringify(currentData));\n      setAllCategories(currentData);\n      setCategoryInfo({\n        bgColor: \"#ffffff\",\n        textColor: \"#000000\",\n        content: \"\",\n        emojiID: \"croissant\"\n      });\n      setNewCategoryModalIsOpen(false);\n      return true;\n    } catch (e) {\n      alert(\"Erro ao adicionar categoria. Entre na sua conta e adicione a categoria novamente.\");\n      return false;\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(CategoriesContext.Provider, {\n    value: {\n      newCategoryState: {\n        previewNewCategory,\n        setCategoryInfo\n      },\n      modalOpen: {\n        newCategoryModalIsOpen,\n        setNewCategoryModalIsOpen\n      },\n      createLocalCategory,\n      allCategories,\n      refreshLocalCategory\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 5\n  }, this);\n}\n\n_s(CategoriesProvider, \"HvHeqqdIiIpk2CbL7s9sVXZUhjE=\");\n\n_c = CategoriesProvider;\nexport function useCategories() {\n  _s2();\n\n  const context = useContext(CategoriesContext);\n  return context;\n}\n\n_s2(useCategories, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\n\nvar _c;\n\n$RefreshReg$(_c, \"CategoriesProvider\");","map":{"version":3,"sources":["/workspace/to-do-list/src/hooks/useCategories.tsx"],"names":["createContext","useContext","useState","CategoriesContext","CategoriesProvider","children","previewNewCategory","setCategoryInfo","bgColor","textColor","content","emojiID","newCategoryModalIsOpen","setNewCategoryModalIsOpen","allCategories","setAllCategories","refreshLocalCategory","currentData","JSON","parse","localStorage","getItem","createLocalCategory","data","push","setItem","stringify","e","alert","newCategoryState","modalOpen","useCategories","context"],"mappings":";;;;AAAA,SAASA,aAAT,EAAmCC,UAAnC,EAA+CC,QAA/C,QAA+D,OAA/D;;AA8BA,MAAMC,iBAAiB,gBAAGH,aAAa,CAAC,EAAD,CAAvC;AAEA,OAAO,SAASI,kBAAT,OAAmE;AAAA;;AAAA,MAAvC;AAAEC,IAAAA;AAAF,GAAuC;AACxE,QAAM,CAACC,kBAAD,EAAqBC,eAArB,IAAwCL,QAAQ,CAAC;AACrDM,IAAAA,OAAO,EAAE,SAD4C;AAErDC,IAAAA,SAAS,EAAE,SAF0C;AAGrDC,IAAAA,OAAO,EAAE,EAH4C;AAIrDC,IAAAA,OAAO,EAAE;AAJ4C,GAAD,CAAtD;AAOA,QAAM,CAACC,sBAAD,EAAyBC,yBAAzB,IAAsDX,QAAQ,CAAC,KAAD,CAApE;AACA,QAAM,CAACY,aAAD,EAAgBC,gBAAhB,IAAoCb,QAAQ,CAAiB,EAAjB,CAAlD;;AAEA,WAASc,oBAAT,GAAgC;AAC9B,QAAIC,WAAW,GAAGC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,aAArB,KAAuC,IAAlD,CAAlB;AAEAN,IAAAA,gBAAgB,CAACE,WAAD,CAAhB;AACD;;AAED,WAASK,mBAAT,CAA6BC,IAA7B,EAAiD;AAC/C,QAAI;AACF,UAAIN,WAAW,GAAGC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,aAArB,KAAuC,IAAlD,CAAlB;AAEAJ,MAAAA,WAAW,CAACO,IAAZ,CAAiBD,IAAjB;AAEAH,MAAAA,YAAY,CAACK,OAAb,CAAqB,aAArB,EAAoCP,IAAI,CAACQ,SAAL,CAAeT,WAAf,CAApC;AAEAF,MAAAA,gBAAgB,CAACE,WAAD,CAAhB;AAEAV,MAAAA,eAAe,CAAC;AACdC,QAAAA,OAAO,EAAE,SADK;AAEdC,QAAAA,SAAS,EAAE,SAFG;AAGdC,QAAAA,OAAO,EAAE,EAHK;AAIdC,QAAAA,OAAO,EAAE;AAJK,OAAD,CAAf;AAMAE,MAAAA,yBAAyB,CAAC,KAAD,CAAzB;AAEA,aAAO,IAAP;AACD,KAlBD,CAmBA,OAAMc,CAAN,EAAS;AACPC,MAAAA,KAAK,CAAC,mFAAD,CAAL;AACA,aAAO,KAAP;AACD;AACF;;AAGD,sBACE,QAAC,iBAAD,CAAmB,QAAnB;AAA4B,IAAA,KAAK,EAAE;AACjCC,MAAAA,gBAAgB,EAAE;AAACvB,QAAAA,kBAAD;AAAqBC,QAAAA;AAArB,OADe;AAEjCuB,MAAAA,SAAS,EAAE;AAAElB,QAAAA,sBAAF;AAA0BC,QAAAA;AAA1B,OAFsB;AAGjCS,MAAAA,mBAHiC;AAIjCR,MAAAA,aAJiC;AAKjCE,MAAAA;AALiC,KAAnC;AAAA,cAOIX;AAPJ;AAAA;AAAA;AAAA;AAAA,UADF;AAWD;;GAvDeD,kB;;KAAAA,kB;AA0DhB,OAAO,SAAS2B,aAAT,GAAyB;AAAA;;AAC9B,QAAMC,OAAO,GAAG/B,UAAU,CAACE,iBAAD,CAA1B;AAEA,SAAO6B,OAAP;AACD;;IAJeD,a","sourcesContent":["import { createContext, ReactNode, useContext, useState } from \"react\";\n\ntype CategoriesProviderProps = {\n  children: ReactNode;\n}\n\ntype CategoryInfo = {\n  categoryID: string;\n  emojiID: string;\n  content: string;\n  bgColor: string;\n  textColor: string;\n}\n\ntype UseCategoriesType = {\n  newCategoryState: {\n    previewNewCategory: CategoryInfo;\n    setCategoryInfo: (data: CategoryInfo) => void;\n  },\n  modalOpen: {\n    newCategoryModalIsOpen: boolean;\n    setNewCategoryModalIsOpen: (open: boolean) => void;\n  },\n  createLocalCategory: (data: CategoryInfo) => void;\n  allCategories: CategoryInfo[];\n  refreshLocalCategory: () => void;\n}\n\n\n\nconst CategoriesContext = createContext({} as UseCategoriesType);\n\nexport function CategoriesProvider({ children }: CategoriesProviderProps) {\n  const [previewNewCategory, setCategoryInfo] = useState({\n    bgColor: \"#ffffff\",\n    textColor: \"#000000\",\n    content: \"\",\n    emojiID: \"croissant\"\n  });\n\n  const [newCategoryModalIsOpen, setNewCategoryModalIsOpen] = useState(false);\n  const [allCategories, setAllCategories] = useState<CategoryInfo[]>([]);\n\n  function refreshLocalCategory() {\n    let currentData = JSON.parse(localStorage.getItem(\"@to-do-list\") || \"[]\");\n\n    setAllCategories(currentData);\n  }\n\n  function createLocalCategory(data: CategoryInfo) {\n    try {\n      let currentData = JSON.parse(localStorage.getItem(\"@to-do-list\") || \"[]\");\n\n      currentData.push(data);\n\n      localStorage.setItem(\"@to-do-list\", JSON.stringify(currentData));\n\n      setAllCategories(currentData);\n\n      setCategoryInfo({\n        bgColor: \"#ffffff\",\n        textColor: \"#000000\",\n        content: \"\",\n        emojiID: \"croissant\"\n      })\n      setNewCategoryModalIsOpen(false);\n\n      return true;\n    }\n    catch(e) {\n      alert(\"Erro ao adicionar categoria. Entre na sua conta e adicione a categoria novamente.\")\n      return false;\n    }\n  }\n\n\n  return (\n    <CategoriesContext.Provider value={{\n      newCategoryState: {previewNewCategory, setCategoryInfo},\n      modalOpen: { newCategoryModalIsOpen, setNewCategoryModalIsOpen },\n      createLocalCategory,\n      allCategories,\n      refreshLocalCategory\n    }}>\n      { children }\n    </CategoriesContext.Provider>\n  );\n}\n\n\nexport function useCategories() {\n  const context = useContext(CategoriesContext);\n\n  return context;\n}"]},"metadata":{},"sourceType":"module"}