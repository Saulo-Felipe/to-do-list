{"ast":null,"code":"var _jsxFileName = \"/workspace/to-do-list/src/hooks/useCategories.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { createContext, useContext, useState } from \"react\";\nimport { v4 as uuid } from \"uuid\";\nimport Modal from \"react-modal\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CategoriesContext = /*#__PURE__*/createContext({});\nexport function CategoriesProvider(_ref) {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [previewNewCategory, setPreviewNewCategory] = useState({\n    categoryID: \"\",\n    bgColor: \"#ffffff\",\n    textColor: \"#000000\",\n    content: \"\",\n    emojiID: \"croissant\"\n  });\n  const [newCategoryModalIsOpen, setNewCategoryModalIsOpen] = useState(false);\n  const [allCategories, setAllCategories] = useState([]);\n\n  function refreshLocalCategory() {\n    let currentData = JSON.parse(localStorage.getItem(\"@to-do-list/categories\") || \"[]\");\n    setAllCategories(currentData);\n  }\n\n  function createLocalCategory(data) {\n    try {\n      let currentData = JSON.parse(localStorage.getItem(\"@to-do-list/categories\") || \"[]\");\n      currentData.push({ ...data,\n        categoryID: uuid()\n      });\n      localStorage.setItem(\"@to-do-list/categories\", JSON.stringify(currentData));\n      setAllCategories(currentData);\n      setPreviewNewCategory({\n        categoryID: \"\",\n        bgColor: \"#ffffff\",\n        textColor: \"#000000\",\n        content: \"\",\n        emojiID: \"croissant\"\n      });\n      setNewCategoryModalIsOpen(false);\n      return true;\n    } catch (e) {\n      alert(\"Erro ao adicionar categoria. Entre na sua conta e adicione a categoria novamente.\");\n      return false;\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(CategoriesContext.Provider, {\n    value: {\n      newCategoryState: {\n        previewNewCategory,\n        setPreviewNewCategory\n      },\n      modalOpen: {\n        newCategoryModalIsOpen,\n        setNewCategoryModalIsOpen\n      },\n      createLocalCategory,\n      allCategories,\n      refreshLocalCategory\n    },\n    children: [children, /*#__PURE__*/_jsxDEV(Modal, {\n      isOpen: newCategoryModalIsOpen\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 5\n  }, this);\n}\n\n_s(CategoriesProvider, \"dA1UnICYqPFfVLv4fjELTfnyekM=\");\n\n_c = CategoriesProvider;\nexport function useCategories() {\n  _s2();\n\n  const context = useContext(CategoriesContext);\n  return context;\n}\n\n_s2(useCategories, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\n\nvar _c;\n\n$RefreshReg$(_c, \"CategoriesProvider\");","map":{"version":3,"sources":["/workspace/to-do-list/src/hooks/useCategories.tsx"],"names":["createContext","useContext","useState","v4","uuid","Modal","CategoriesContext","CategoriesProvider","children","previewNewCategory","setPreviewNewCategory","categoryID","bgColor","textColor","content","emojiID","newCategoryModalIsOpen","setNewCategoryModalIsOpen","allCategories","setAllCategories","refreshLocalCategory","currentData","JSON","parse","localStorage","getItem","createLocalCategory","data","push","setItem","stringify","e","alert","newCategoryState","modalOpen","useCategories","context"],"mappings":";;;;AAAA,SAASA,aAAT,EAAmCC,UAAnC,EAA+CC,QAA/C,QAA+D,OAA/D;AACA,SAASC,EAAE,IAAIC,IAAf,QAA2B,MAA3B;AACA,OAAOC,KAAP,MAAkB,aAAlB;;AA+BA,MAAMC,iBAAiB,gBAAGN,aAAa,CAAC,EAAD,CAAvC;AAEA,OAAO,SAASO,kBAAT,OAAmE;AAAA;;AAAA,MAAvC;AAAEC,IAAAA;AAAF,GAAuC;AACxE,QAAM,CAACC,kBAAD,EAAqBC,qBAArB,IAA8CR,QAAQ,CAAC;AAC3DS,IAAAA,UAAU,EAAE,EAD+C;AAE3DC,IAAAA,OAAO,EAAE,SAFkD;AAG3DC,IAAAA,SAAS,EAAE,SAHgD;AAI3DC,IAAAA,OAAO,EAAE,EAJkD;AAK3DC,IAAAA,OAAO,EAAE;AALkD,GAAD,CAA5D;AAQA,QAAM,CAACC,sBAAD,EAAyBC,yBAAzB,IAAsDf,QAAQ,CAAC,KAAD,CAApE;AACA,QAAM,CAACgB,aAAD,EAAgBC,gBAAhB,IAAoCjB,QAAQ,CAAiB,EAAjB,CAAlD;;AAEA,WAASkB,oBAAT,GAAgC;AAC9B,QAAIC,WAAW,GAAGC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,wBAArB,KAAkD,IAA7D,CAAlB;AAEAN,IAAAA,gBAAgB,CAACE,WAAD,CAAhB;AACD;;AAED,WAASK,mBAAT,CAA6BC,IAA7B,EAAiD;AAC/C,QAAI;AACF,UAAIN,WAAW,GAAGC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,wBAArB,KAAkD,IAA7D,CAAlB;AAEAJ,MAAAA,WAAW,CAACO,IAAZ,CAAiB,EAAC,GAAGD,IAAJ;AAAUhB,QAAAA,UAAU,EAAEP,IAAI;AAA1B,OAAjB;AAEAoB,MAAAA,YAAY,CAACK,OAAb,CAAqB,wBAArB,EAA+CP,IAAI,CAACQ,SAAL,CAAeT,WAAf,CAA/C;AAEAF,MAAAA,gBAAgB,CAACE,WAAD,CAAhB;AAEAX,MAAAA,qBAAqB,CAAC;AACpBC,QAAAA,UAAU,EAAE,EADQ;AAEpBC,QAAAA,OAAO,EAAE,SAFW;AAGpBC,QAAAA,SAAS,EAAE,SAHS;AAIpBC,QAAAA,OAAO,EAAE,EAJW;AAKpBC,QAAAA,OAAO,EAAE;AALW,OAAD,CAArB;AAOAE,MAAAA,yBAAyB,CAAC,KAAD,CAAzB;AAEA,aAAO,IAAP;AACD,KAnBD,CAoBA,OAAMc,CAAN,EAAS;AACPC,MAAAA,KAAK,CAAC,mFAAD,CAAL;AACA,aAAO,KAAP;AACD;AACF;;AAED,sBACE,QAAC,iBAAD,CAAmB,QAAnB;AAA4B,IAAA,KAAK,EAAE;AACjCC,MAAAA,gBAAgB,EAAE;AAACxB,QAAAA,kBAAD;AAAqBC,QAAAA;AAArB,OADe;AAEjCwB,MAAAA,SAAS,EAAE;AAAElB,QAAAA,sBAAF;AAA0BC,QAAAA;AAA1B,OAFsB;AAGjCS,MAAAA,mBAHiC;AAIjCR,MAAAA,aAJiC;AAKjCE,MAAAA;AALiC,KAAnC;AAAA,eAOIZ,QAPJ,eAQE,QAAC,KAAD;AAAO,MAAA,MAAM,EAAEQ;AAAf;AAAA;AAAA;AAAA;AAAA,YARF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAcD;;GA3DeT,kB;;KAAAA,kB;AA8DhB,OAAO,SAAS4B,aAAT,GAAyB;AAAA;;AAC9B,QAAMC,OAAO,GAAGnC,UAAU,CAACK,iBAAD,CAA1B;AAEA,SAAO8B,OAAP;AACD;;IAJeD,a","sourcesContent":["import { createContext, ReactNode, useContext, useState } from \"react\";\nimport { v4 as uuid } from \"uuid\";\nimport Modal from \"react-modal\";\n\n\ntype CategoriesProviderProps = {\n  children: ReactNode;\n}\n\nexport type CategoryInfo = {\n  categoryID: string;\n  emojiID: string;\n  content: string;\n  bgColor: string;\n  textColor: string;\n}\n\ntype UseCategoriesType = {\n  newCategoryState: {\n    previewNewCategory: CategoryInfo;\n    setPreviewNewCategory: (data: CategoryInfo) => void;\n  },\n  modalOpen: {\n    newCategoryModalIsOpen: boolean;\n    setNewCategoryModalIsOpen: (open: boolean) => void;\n  },\n  createLocalCategory: (data: CategoryInfo) => void;\n  allCategories: CategoryInfo[];\n  refreshLocalCategory: () => void;\n}\n\n\n\nconst CategoriesContext = createContext({} as UseCategoriesType);\n\nexport function CategoriesProvider({ children }: CategoriesProviderProps) {\n  const [previewNewCategory, setPreviewNewCategory] = useState({\n    categoryID: \"\",\n    bgColor: \"#ffffff\",\n    textColor: \"#000000\",\n    content: \"\",\n    emojiID: \"croissant\"\n  });\n\n  const [newCategoryModalIsOpen, setNewCategoryModalIsOpen] = useState(false);\n  const [allCategories, setAllCategories] = useState<CategoryInfo[]>([]);\n\n  function refreshLocalCategory() {\n    let currentData = JSON.parse(localStorage.getItem(\"@to-do-list/categories\") || \"[]\");\n\n    setAllCategories(currentData);\n  }\n\n  function createLocalCategory(data: CategoryInfo) {\n    try {\n      let currentData = JSON.parse(localStorage.getItem(\"@to-do-list/categories\") || \"[]\");\n\n      currentData.push({...data, categoryID: uuid()});\n\n      localStorage.setItem(\"@to-do-list/categories\", JSON.stringify(currentData));\n\n      setAllCategories(currentData);\n\n      setPreviewNewCategory({\n        categoryID: \"\",\n        bgColor: \"#ffffff\",\n        textColor: \"#000000\",\n        content: \"\",\n        emojiID: \"croissant\"\n      })\n      setNewCategoryModalIsOpen(false);\n\n      return true;\n    }\n    catch(e) {\n      alert(\"Erro ao adicionar categoria. Entre na sua conta e adicione a categoria novamente.\")\n      return false;\n    }\n  }\n\n  return (\n    <CategoriesContext.Provider value={{\n      newCategoryState: {previewNewCategory, setPreviewNewCategory},\n      modalOpen: { newCategoryModalIsOpen, setNewCategoryModalIsOpen },\n      createLocalCategory,\n      allCategories,\n      refreshLocalCategory,\n    }}>\n      { children }\n      <Modal isOpen={newCategoryModalIsOpen} >\n\n      </Modal>\n    </CategoriesContext.Provider>\n  );\n}\n\n\nexport function useCategories() {\n  const context = useContext(CategoriesContext);\n\n  return context;\n}"]},"metadata":{},"sourceType":"module"}