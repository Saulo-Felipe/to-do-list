{"ast":null,"code":"var _jsxFileName = \"/workspace/to-do-list/src/hooks/useCategories.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { createContext, useContext, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CategoriesContext = /*#__PURE__*/createContext({});\nexport function CategoriesProvider(_ref) {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [categoryInfo, setCategoryInfo] = useState({\n    bgColor: \"#ffffff\",\n    textColor: \"#000000\",\n    content: \"\",\n    emojiID: \"croissant\"\n  });\n  const [newCategoryModalIsOpen, setNewCategoryModalIsOpen] = useState(false);\n\n  function createLocalCategory(data) {\n    try {\n      let oldData = JSON.parse(localStorage.getItem(\"@to-do-list\") || \"[]\");\n      console.log(data); // localStorage.setItem(\"@to-do-list\", )\n    } catch (e) {\n      alert(\"Erro ao adicionar categoria. Entre na sua conta e adicione a categoria novamente.\");\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(CategoriesContext.Provider, {\n    value: {\n      newCategoryState: {\n        categoryInfo,\n        setCategoryInfo\n      },\n      modalOpen: {\n        newCategoryModalIsOpen,\n        setNewCategoryModalIsOpen\n      },\n      createLocalCategory\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n}\n\n_s(CategoriesProvider, \"SmyDrX7J0JPQ73lHe+OW9pyhPxw=\");\n\n_c = CategoriesProvider;\nexport function useCategories() {\n  _s2();\n\n  const context = useContext(CategoriesContext);\n  return context;\n}\n\n_s2(useCategories, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\n\nvar _c;\n\n$RefreshReg$(_c, \"CategoriesProvider\");","map":{"version":3,"sources":["/workspace/to-do-list/src/hooks/useCategories.tsx"],"names":["createContext","useContext","useState","CategoriesContext","CategoriesProvider","children","categoryInfo","setCategoryInfo","bgColor","textColor","content","emojiID","newCategoryModalIsOpen","setNewCategoryModalIsOpen","createLocalCategory","data","oldData","JSON","parse","localStorage","getItem","console","log","e","alert","newCategoryState","modalOpen","useCategories","context"],"mappings":";;;;AAAA,SAASA,aAAT,EAAmCC,UAAnC,EAA+CC,QAA/C,QAA+D,OAA/D;;AA2BA,MAAMC,iBAAiB,gBAAGH,aAAa,CAAC,EAAD,CAAvC;AAEA,OAAO,SAASI,kBAAT,OAAmE;AAAA;;AAAA,MAAvC;AAAEC,IAAAA;AAAF,GAAuC;AACxE,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCL,QAAQ,CAAC;AAC/CM,IAAAA,OAAO,EAAE,SADsC;AAE/CC,IAAAA,SAAS,EAAE,SAFoC;AAG/CC,IAAAA,OAAO,EAAE,EAHsC;AAI/CC,IAAAA,OAAO,EAAE;AAJsC,GAAD,CAAhD;AAOA,QAAM,CAACC,sBAAD,EAAyBC,yBAAzB,IAAsDX,QAAQ,CAAC,KAAD,CAApE;;AAEA,WAASY,mBAAT,CAA6BC,IAA7B,EAAiD;AAC/C,QAAI;AACF,UAAIC,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,aAArB,KAAuC,IAAlD,CAAd;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYP,IAAZ,EAFE,CAIF;AACD,KALD,CAMA,OAAMQ,CAAN,EAAS;AACPC,MAAAA,KAAK,CAAC,mFAAD,CAAL;AACD;AACF;;AAGD,sBACE,QAAC,iBAAD,CAAmB,QAAnB;AAA4B,IAAA,KAAK,EAAE;AACjCC,MAAAA,gBAAgB,EAAE;AAACnB,QAAAA,YAAD;AAAeC,QAAAA;AAAf,OADe;AAEjCmB,MAAAA,SAAS,EAAE;AAAEd,QAAAA,sBAAF;AAA0BC,QAAAA;AAA1B,OAFsB;AAGjCC,MAAAA;AAHiC,KAAnC;AAAA,cAMIT;AANJ;AAAA;AAAA;AAAA;AAAA,UADF;AAUD;;GAjCeD,kB;;KAAAA,kB;AAoChB,OAAO,SAASuB,aAAT,GAAyB;AAAA;;AAC9B,QAAMC,OAAO,GAAG3B,UAAU,CAACE,iBAAD,CAA1B;AAEA,SAAOyB,OAAP;AACD;;IAJeD,a","sourcesContent":["import { createContext, ReactNode, useContext, useState } from \"react\";\n\ntype CategoriesProviderProps = {\n  children: ReactNode;\n}\n\ntype CategoryInfo = {\n  emojiID: string;\n  content: string;\n  bgColor: string;\n  textColor: string;\n}\n\ntype UseCategoriesType = {\n  newCategoryState: {\n    categoryInfo: CategoryInfo;\n    setCategoryInfo: (data: CategoryInfo) => void;\n  },\n  modalOpen: {\n    newCategoryModalIsOpen: boolean;\n    setNewCategoryModalIsOpen: (open: boolean) => void;\n  },\n  createLocalCategory: (data: CategoryInfo) => void;\n}\n\n\n\nconst CategoriesContext = createContext({} as UseCategoriesType);\n\nexport function CategoriesProvider({ children }: CategoriesProviderProps) {\n  const [categoryInfo, setCategoryInfo] = useState({\n    bgColor: \"#ffffff\",\n    textColor: \"#000000\",\n    content: \"\",\n    emojiID: \"croissant\"\n  });\n\n  const [newCategoryModalIsOpen, setNewCategoryModalIsOpen] = useState(false);\n\n  function createLocalCategory(data: CategoryInfo) {\n    try {\n      let oldData = JSON.parse(localStorage.getItem(\"@to-do-list\") || \"[]\");\n      console.log(data);\n\n      // localStorage.setItem(\"@to-do-list\", )\n    }\n    catch(e) {\n      alert(\"Erro ao adicionar categoria. Entre na sua conta e adicione a categoria novamente.\")\n    }\n  }\n\n\n  return (\n    <CategoriesContext.Provider value={{\n      newCategoryState: {categoryInfo, setCategoryInfo},\n      modalOpen: { newCategoryModalIsOpen, setNewCategoryModalIsOpen },\n      createLocalCategory,\n\n    }}>\n      { children }\n    </CategoriesContext.Provider>\n  );\n}\n\n\nexport function useCategories() {\n  const context = useContext(CategoriesContext);\n\n  return context;\n}"]},"metadata":{},"sourceType":"module"}